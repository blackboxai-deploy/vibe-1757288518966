---
name: CI

'on':
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20.18.1

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.18.1', '22.x']
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          %BR%
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
          PYTHONUNBUFFERED: '1'
        run: |
          python -m pip install --upgrade pip
          if [ -f constraints.txt ]; then
            CONSTRAINTS="-c constraints.txt"
          else
            CONSTRAINTS=""
          fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt $CONSTRAINTS; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt $CONSTRAINTS; fi

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: |
          jq -e . < package.json
          npm ci || npm install

      - name: Lint and Test
        run: |
          jq -e . < package.json
          npm run lint
          npm test --if-present

      - name: Build
        run: npm run build

      - name: Compute latest main SHA
        id: latest
        run: |
          set -e
          LATEST=$(git ls-remote origin -h refs/heads/main | cut -f1)
          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          if [ "$GITHUB_SHA" = "$LATEST" ]; then
            echo "is_latest=true" >> $GITHUB_OUTPUT
          else
            echo "is_latest=false" >> $GITHUB_OUTPUT
          fi

      - name: Not latest skip marker
        if: steps.latest.outputs.is_latest != 'true'
        run: echo "Not the latest commit on main, skipping deploy"

      - name: Discover output dir
        id: build
        run: |
          set -e
          for d in docs dist build out .output/public public; do
            if [ -d "$d" ]; then
              echo "output_dir=$d" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "No output dir found" >&2
          exit 1

      - name: Setup Node for deploy
        if: steps.latest.outputs.is_latest == 'true'
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: '20.18.1'

      - name: Deploy to Cloudflare Pages
        if: steps.latest.outputs.is_latest == 'true'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          ci/wrangler-flags
          npx -y wrangler@4.33.0 --version
          npx -y wrangler@4.33.0 pages deploy "${{ steps.build.outputs.output_dir }}" --project-name baddbeatz --branch main --commit --commit-dirty=true