version: '3.8'

services:
  # Frontend - Next.js Application
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
    container_name: baddbeatz_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:4000/api
      - NEXT_PUBLIC_GRAPHQL_URL=http://backend:4000/graphql
      - NEXT_PUBLIC_WS_URL=ws://backend:4000/ws
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - baddbeatz_network

  # Backend - Node.js/Express API
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
    container_name: baddbeatz_backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DATABASE_URL=postgresql://baddbeatz_user:baddbeatz_pass@postgres:5432/baddbeatz_db
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/baddbeatz_music
      - JWT_SECRET=your_super_secret_jwt_key_change_in_production
      - JWT_REFRESH_SECRET=your_super_secret_refresh_key_change_in_production
      - CORS_ORIGIN=http://localhost:3000
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=100mb
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - mongodb
    restart: unless-stopped
    networks:
      - baddbeatz_network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: baddbeatz_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=baddbeatz_db
      - POSTGRES_USER=baddbeatz_user
      - POSTGRES_PASSWORD=baddbeatz_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - baddbeatz_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U baddbeatz_user -d baddbeatz_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: baddbeatz_redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass baddbeatz_redis_pass --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - baddbeatz_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for Music Metadata
  mongodb:
    image: mongo:7
    container_name: baddbeatz_mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=baddbeatz_mongo_root
      - MONGO_INITDB_ROOT_PASSWORD=baddbeatz_mongo_pass
      - MONGO_INITDB_DATABASE=baddbeatz_music
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - baddbeatz_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Reverse Proxy & Load Balancer
  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: baddbeatz_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - baddbeatz_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: baddbeatz_prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - baddbeatz_network

  # Grafana Analytics Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: baddbeatz_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=baddbeatz_grafana_admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - baddbeatz_network

  # Redis Commander (Development Tool)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: baddbeatz_redis_commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:baddbeatz_redis_pass
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - baddbeatz_network
    profiles:
      - development

  # PostgreSQL Admin (Development Tool)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: baddbeatz_pgadmin
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@baddbeatz.com
      - PGADMIN_DEFAULT_PASSWORD=baddbeatz_pgadmin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - baddbeatz_network
    profiles:
      - development

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom Network for Service Communication
networks:
  baddbeatz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16